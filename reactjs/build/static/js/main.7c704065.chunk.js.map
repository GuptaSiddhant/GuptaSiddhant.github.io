{"version":3,"sources":["theme.js","state.js","components/button.js","App.js","serviceWorker.js","index.js"],"names":["themes","light","textPrimary","textSecondary","textDisabled","bgBase","bgElevated","separator","red","orange","yellow","green","blue","purple","dark","setRootCSS","theme","newTheme","item","document","documentElement","style","setProperty","initState","reducer","state","action","type","payload","localState","JSON","parse","localStorage","getItem","StateContext","createContext","useStateRef","useContext","Button","children","dispatch","onClick","App","useEffect","setItem","stringify","id","Boolean","window","location","hostname","match","ReactDOM","render","Provider","value","useReducer","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0KAAaA,G,MAAS,CACpBC,MAAO,CACLC,YAAa,UACbC,cAAe,UACfC,aAAc,UACdC,OAAQ,UACRC,WAAY,UACZC,UAAW,UACXC,IAAK,UACLC,OAAQ,UACRC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,OAAQ,WAEVC,KAAM,CACJZ,YAAa,UACbC,cAAe,UACfC,aAAc,UACdC,OAAQ,UACRC,WAAY,UACZC,UAAW,UACXC,IAAK,UACLC,OAAQ,UACRC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,OAAQ,aAIL,SAASE,EAAWC,GACzB,IAAMC,EAAWjB,EAAOgB,GACxB,IAAK,IAAIE,KAAQD,EACfE,SAASC,gBAAgBC,MAAMC,YAA/B,YAAgDJ,GAAQD,EAASC,I,yOC/BrE,IAAMK,EAAY,CAChBP,MAAO,SAGHQ,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,cAEH,OADAZ,EAAWW,EAAOE,S,yVACX,CAAP,GAAYH,EAAZ,CAAmBT,MAAOU,EAAOE,UACnC,QACE,OAAOH,IAIPI,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,UAEtCC,EAAeC,0BACfC,EAAc,kBAAMC,qBAAWH,ICA7BI,EAjBA,SAAC,GAAiB,EAAfC,SAAgB,IAAD,EACLH,IADK,mBACxBX,EADwB,KACjBe,EADiB,KAG/B,OACE,4BACEC,QAAS,kBACPD,EAAS,CACPb,KAAM,cACNC,QAAyB,SAAhBH,EAAMT,MAAmB,QAAU,WAI/CS,EAAMT,QCKE0B,MAdf,WAAgB,IAAD,EACaN,IADb,mBACNX,EADM,KAOb,OAPa,KAEbV,EAAWU,EAAMT,OACjB2B,qBAAU,WACRX,aAAaY,QAAQ,QAASd,KAAKe,UAAUpB,MAC5C,CAACA,IAGF,yBAAKqB,GAAG,OAAR,UACS,kBAAC,EAAD,QCHOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,mBJa2B,SAAC,GAAD,IAAGd,EAAH,EAAGA,SAAH,OAC3B,kBAACL,EAAaoB,SAAd,CAAuBC,MAAOC,qBAAWhC,EAASK,GAAcN,IAC7DgB,KIfH,KACE,kBAAC,EAAD,OAEFpB,SAASsC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7c704065.chunk.js","sourcesContent":["export const themes = {\n  light: {\n    textPrimary: \"#000000\",\n    textSecondary: \"#4D4D4D\",\n    textDisabled: \"#8E8E93\",\n    bgBase: \"#F2F2F7\",\n    bgElevated: \"#FFFFFF\",\n    separator: \"#CECED9\",\n    red: \"#FF3B30\",\n    orange: \"#FF9500\",\n    yellow: \"#FFCC00\",\n    green: \"#34C759\",\n    blue: \"#007AFF\",\n    purple: \"#AF52DE\"\n  },\n  dark: {\n    textPrimary: \"#FFFFFF\",\n    textSecondary: \"#C6C6C8\",\n    textDisabled: \"#8E8E93\",\n    bgBase: \"#000000\",\n    bgElevated: \"#1C1C1E\",\n    separator: \"#4D4D4D\",\n    red: \"#FF453A\",\n    orange: \"#FF9F0A\",\n    yellow: \"#FFD60A\",\n    green: \"#32D74B\",\n    blue: \"#0A84FF\",\n    purple: \"#BF5AF2\"\n  }\n};\n\nexport function setRootCSS(theme) {\n  const newTheme = themes[theme];\n  for (let item in newTheme) {\n    document.documentElement.style.setProperty(`--${item}`, newTheme[item]);\n  }\n}\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { setRootCSS } from \"./theme\";\n\nconst initState = {\n  theme: \"light\"\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"themeSwitch\":\n      setRootCSS(action.payload);\n      return { ...state, theme: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst localState = JSON.parse(localStorage.getItem(\"state\"));\n\nexport const StateContext = createContext();\nexport const useStateRef = () => useContext(StateContext);\nexport const StateProvider = ({ children }) => (\n  <StateContext.Provider value={useReducer(reducer, localState || initState)}>\n    {children}\n  </StateContext.Provider>\n);\n","import React from \"react\";\nimport { useStateRef } from \"../state\";\n\nconst Button = ({ children }) => {\n  const [state, dispatch] = useStateRef();\n\n  return (\n    <button\n      onClick={() =>\n        dispatch({\n          type: \"themeSwitch\",\n          payload: state.theme === \"dark\" ? \"light\" : \"dark\"\n        })\n      }\n    >\n      {state.theme}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { setRootCSS } from \"./theme\";\nimport { useStateRef } from \"./state\";\nimport Button from \"./components/button\";\n\nfunction App() {\n  const [state, dispatch] = useStateRef();\n  setRootCSS(state.theme);\n  useEffect(() => {\n    localStorage.setItem(\"state\", JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <div id=\"App\">\n      Theme: <Button />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}